<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="vi">
<body>
	<div class="content-box">
		<div class="content-header">M·ª•c ti√™u kh√≥a h·ªçc</div>
		<div class="content-body">
			<div class="objective-intro">H·ªçc vi√™n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨ trong kh√≥a
				h·ªçc c·ªßa b·∫°n?</div>


			<div id="objectiveItemsContainer" class="objective-items-container">
				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: X√°c ƒë·ªãnh m·ª•c ti√™u v√† qu·∫£n
						l√Ω c√¥ng vi·ªác</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: D·ª± t√≠nh ng√¢n s√°ch v√† ti·ªÅn
						ƒë·ªì</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng d·ª± √°n</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: N√¢ng cao hi·ªáu qu·∫£ c√¥ng
						vi·ªác v·ªõi ph∆∞∆°ng ph√°p qu·∫£n l√Ω ƒë·ªôi nh√≥m</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>
			</div>

			<div class="add-button" id="addButton">
				<span class="add-icon">‚äï</span> Th√™m n·ªôi dung
			</div>

			<div class="section-title">Kh√≥a h·ªçc n√†y d√†nh cho ƒë·ªëi t∆∞·ª£ng n√†o?</div>



			<div class="text-editor">
				<div class="editor-toolbar">
					<button class="toolbar-button">
						<strong>B</strong>
					</button>
					<button class="toolbar-button">
						<em>I</em>
					</button>
					<button class="toolbar-button">‚â°</button>
				</div>
				<div class="editor-content">V√≠ d·ª•: Nh·ªØng ng∆∞·ªùi ƒëang kinh doanh
					online,...</div>
			</div>

			<div class="section-title">Ch√†o m·ª´ng h·ªçc vi√™n tham gia kh√≥a h·ªçc</div>


			<div class="text-editor">
				<div class="editor-toolbar">
					<button class="toolbar-button">
						<strong>B</strong>
					</button>
					<button class="toolbar-button">
						<em>I</em>
					</button>
					<button class="toolbar-button">‚â°</button>
				</div>
				<div class="editor-content">V√≠ d·ª•: Ch√†o m·ª´ng c√°c b·∫°n ƒë·∫øn v·ªõi
					kh√≥a h·ªçc...</div>
			</div>
		</div>
	</div>
	<script>
        // L·∫•y ph·∫ßn t·ª≠ container v√† n√∫t th√™m m·ªõi
        const container = document.getElementById('objectiveItemsContainer');
        const addButton = document.getElementById('addButton');
        
        // Th√™m s·ª± ki·ªán click cho n√∫t th√™m m·ªõi
        addButton.addEventListener('click', function() {
            // T·∫°o div m·ªõi cho objective-item
            const newItem = document.createElement('div');
            newItem.className = 'objective-item';
            
            // T·∫°o input ƒë·ªÉ nh·∫≠p m·ª•c ti√™u m·ªõi
            const objectiveInput = document.createElement('input');
            objectiveInput.className = 'new-objective-input';
            objectiveInput.type = 'text';
            objectiveInput.placeholder = 'Nh·∫≠p m·ª•c ti√™u m·ªõi...';
            objectiveInput.style.width = '100%';
            objectiveInput.style.padding = '5px';
            objectiveInput.style.border = '1px solid #ccc';
            objectiveInput.style.borderRadius = '3px';
            
            // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
            objectiveInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    convertInputToText(this);
                }
            });
            
            objectiveInput.addEventListener('blur', function() {
                convertInputToText(this);
            });
            
            // T·∫°o div cho counter
            const counter = document.createElement('div');
            counter.className = 'counter';
            counter.textContent = '0';
            
            // C·∫≠p nh·∫≠t counter khi g√µ
            objectiveInput.addEventListener('input', function() {
                counter.textContent = this.value.length;
            });
            
            // T·∫°o n√∫t x√≥a
            const deleteButton = document.createElement('div');
            deleteButton.className = 'delete-button';
            deleteButton.textContent = 'üóëÔ∏è';
            deleteButton.onclick = function() {
                deleteItem(this);
            };
            
            // Th√™m c√°c ph·∫ßn t·ª≠ con v√†o item m·ªõi
            newItem.appendChild(objectiveInput);
            newItem.appendChild(counter);
            newItem.appendChild(deleteButton);
            
            // Th√™m item m·ªõi v√†o container
            container.appendChild(newItem);
            
            // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
            objectiveInput.focus();
        });
        
        // H√†m chuy·ªÉn ƒë·ªïi input th√†nh text
        function convertInputToText(inputElement) {
            if (inputElement.value.trim() === '') {
                // N·∫øu input tr·ªëng, x√≥a item
                inputElement.parentElement.remove();
                return;
            }
            
            const objectiveText = document.createElement('div');
            objectiveText.className = 'objective-text';
            objectiveText.textContent = inputElement.value;
            
            // Thay th·∫ø input b·∫±ng text
            inputElement.parentElement.replaceChild(objectiveText, inputElement);
        }
        
        // H√†m x√≥a item
        function deleteItem(button) {
            button.parentElement.remove();
        }
        
        // Th√™m ch·ª©c nƒÉng x√≥a cho c√°c item ƒë√£ c√≥ s·∫µn
        document.querySelectorAll('.delete-button').forEach(button => {
            button.addEventListener('click', function() {
                this.parentElement.remove();
            });
        });
        
        // Th√™m ch·ª©c nƒÉng ƒë·∫øm k√Ω t·ª± th·ª±c t·∫ø
        document.querySelectorAll('.objective-text').forEach(text => {
            const counter = text.nextElementSibling;
            counter.textContent = text.textContent.length;
        });
        document.querySelectorAll('.objective-text').forEach(textElement => {
            textElement.addEventListener('click', function() {
                // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa text
                const currentText = this.textContent;
                
                // T·∫°o input m·ªõi
                const objectiveInput = document.createElement('input');
                objectiveInput.className = 'new-objective-input';
                objectiveInput.type = 'text';
                objectiveInput.value = currentText;
                objectiveInput.style.width = '100%';
                objectiveInput.style.padding = '5px';
                objectiveInput.style.border = '1px solid #ccc';
                objectiveInput.style.borderRadius = '3px';
                
                // L·∫•y ph·∫ßn t·ª≠ counter
                const counter = this.nextElementSibling;
                
                // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
                objectiveInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        convertEditInputToText(this, counter);
                    }
                });
                
                objectiveInput.addEventListener('blur', function() {
                    convertEditInputToText(this, counter);
                });
                
                // C·∫≠p nh·∫≠t counter khi g√µ
                objectiveInput.addEventListener('input', function() {
                    counter.textContent = this.value.length;
                });
                
                // Thay th·∫ø text b·∫±ng input
                this.parentElement.replaceChild(objectiveInput, this);
                
                // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
                objectiveInput.focus();
                
                // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
                objectiveInput.setSelectionRange(currentText.length, currentText.length);
            });
        });

        // H√†m chuy·ªÉn ƒë·ªïi input th√†nh text khi ƒëang ch·ªânh s·ª≠a
        function convertEditInputToText(inputElement, counter) {
            const objectiveText = document.createElement('div');
            objectiveText.className = 'objective-text';
            objectiveText.textContent = inputElement.value;
            
            // Th√™m l·∫°i event listener cho text m·ªõi
            objectiveText.addEventListener('click', function() {
                // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa text
                const currentText = this.textContent;
                
                // T·∫°o input m·ªõi
                const objectiveInput = document.createElement('input');
                objectiveInput.className = 'new-objective-input';
                objectiveInput.type = 'text';
                objectiveInput.value = currentText;
                objectiveInput.style.width = '100%';
                objectiveInput.style.padding = '5px';
                objectiveInput.style.border = '1px solid #ccc';
                objectiveInput.style.borderRadius = '3px';
                
                // L·∫•y ph·∫ßn t·ª≠ counter
                const counter = this.nextElementSibling;
                
                // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
                objectiveInput.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        convertEditInputToText(this, counter);
                    }
                });
                
                objectiveInput.addEventListener('blur', function() {
                    convertEditInputToText(this, counter);
                });
                
                // C·∫≠p nh·∫≠t counter khi g√µ
                objectiveInput.addEventListener('input', function() {
                    counter.textContent = this.value.length;
                });
                
                // Thay th·∫ø text b·∫±ng input
                this.parentElement.replaceChild(objectiveInput, this);
                
                // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
                objectiveInput.focus();
                
                // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
                objectiveInput.setSelectionRange(currentText.length, currentText.length);
            });
            
            // Thay th·∫ø input b·∫±ng text
            inputElement.parentElement.replaceChild(objectiveText, inputElement);
            
            // C·∫≠p nh·∫≠t counter
            counter.textContent = objectiveText.textContent.length;
        }
        
     // Th√™m event listener cho t·∫•t c·∫£ c√°c editor-content
        document.querySelectorAll('.editor-content').forEach(contentElement => {
            contentElement.addEventListener('click', function() {
                // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa content
                const currentContent = this.textContent.trim();
                
                // T·∫°o textarea m·ªõi
                const editorTextarea = document.createElement('textarea');
                editorTextarea.className = 'editor-textarea';
                editorTextarea.value = currentContent;
                
                // Thi·∫øt l·∫≠p style cho textarea
                editorTextarea.style.width = '100%';
                editorTextarea.style.minHeight = '100px';
                editorTextarea.style.padding = '15px';
                editorTextarea.style.border = 'none';
                editorTextarea.style.resize = 'vertical';
                editorTextarea.style.fontFamily = 'Arial, sans-serif';
                editorTextarea.style.fontSize = 'inherit';
                editorTextarea.style.color = '#333';
                editorTextarea.style.outline = 'none';
                
                // Khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi textarea ho·∫∑c nh·∫•n Ctrl+Enter, chuy·ªÉn textarea th√†nh text
                editorTextarea.addEventListener('blur', function() {
                    convertTextareaToContent(this);
                });
                
                editorTextarea.addEventListener('keydown', function(e) {
                    if (e.ctrlKey && e.key === 'Enter') {
                        convertTextareaToContent(this);
                        e.preventDefault();
                    }
                });
                
                // Thay th·∫ø content b·∫±ng textarea
                this.parentElement.replaceChild(editorTextarea, this);
                
                // Focus v√†o textarea ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
                editorTextarea.focus();
                
                // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
                editorTextarea.setSelectionRange(currentContent.length, currentContent.length);
            });
        });

        // H√†m chuy·ªÉn ƒë·ªïi textarea th√†nh content
        function convertTextareaToContent(textareaElement) {
            const editorContent = document.createElement('div');
            editorContent.className = 'editor-content';
            editorContent.textContent = textareaElement.value || 'Nh·∫≠p n·ªôi dung c·ªßa b·∫°n ·ªü ƒë√¢y...';
            
            // Thi·∫øt l·∫≠p style nh∆∞ ban ƒë·∫ßu
            editorContent.style.padding = '15px';
            editorContent.style.minHeight = '100px';
            editorContent.style.color = textareaElement.value ? '#333' : '#999';
            
            // Th√™m l·∫°i event listener cho content m·ªõi
            editorContent.addEventListener('click', function() {
                const currentContent = this.textContent.trim();
                
                const editorTextarea = document.createElement('textarea');
                editorTextarea.className = 'editor-textarea';
                editorTextarea.value = currentContent;
                
                // Thi·∫øt l·∫≠p style cho textarea
                editorTextarea.style.width = '100%';
                editorTextarea.style.minHeight = '100px';
                editorTextarea.style.padding = '15px';
                editorTextarea.style.border = 'none';
                editorTextarea.style.resize = 'vertical';
                editorTextarea.style.fontFamily = 'Arial, sans-serif';
                editorTextarea.style.fontSize = 'inherit';
                editorTextarea.style.color = '#333';
                editorTextarea.style.outline = 'none';
                
                editorTextarea.addEventListener('blur', function() {
                    convertTextareaToContent(this);
                });
                
                editorTextarea.addEventListener('keydown', function(e) {
                    if (e.ctrlKey && e.key === 'Enter') {
                        convertTextareaToContent(this);
                        e.preventDefault();
                    }
                });
                
                this.parentElement.replaceChild(editorTextarea, this);
                editorTextarea.focus();
                editorTextarea.setSelectionRange(currentContent.length, currentContent.length);
            });
            
            // Thay th·∫ø textarea b·∫±ng content
            textareaElement.parentElement.replaceChild(editorContent, textareaElement);
        }
    </script>
</body>
</html>