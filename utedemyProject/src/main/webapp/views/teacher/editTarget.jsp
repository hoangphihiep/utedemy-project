<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="vi">
<body>
	<div class="content-box">
		<div class="content-header">M·ª•c ti√™u kh√≥a h·ªçc</div>
		<div class="content-body">
			<div class="objective-intro">H·ªçc vi√™n s·∫Ω h·ªçc ƒë∆∞·ª£c g√¨ trong kh√≥a
				h·ªçc c·ªßa b·∫°n?</div>

			<input type="hidden" id="learnerAchievementsInput" name="learnerAchievements" value="${target}" />
			<div id="objectiveItemsContainer" class="objective-items-container">
				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: X√°c ƒë·ªãnh m·ª•c ti√™u v√† qu·∫£n l√Ω c√¥ng vi·ªác</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: D·ª± t√≠nh ng√¢n s√°ch v√† ti·ªÅn ƒë·ªì</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: Qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng d·ª± √°n</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>

				<div class="objective-item">
					<div class="objective-text">V√≠ d·ª•: N√¢ng cao hi·ªáu qu·∫£ c√¥ng vi·ªác v·ªõi ph∆∞∆°ng ph√°p qu·∫£n l√Ω ƒë·ªôi nh√≥m</div>
					<div class="counter">120</div>
					<div class="delete-button" onclick="deleteItem(this)">üóëÔ∏è</div>
				</div>
			</div>

			<div class="add-button" id="addButton">
				<span class="add-icon">‚äï</span> Th√™m n·ªôi dung
			</div>

			<div class="section-title">Kh√≥a h·ªçc n√†y d√†nh cho ƒë·ªëi t∆∞·ª£ng n√†o?</div>



			<div class="text-editor">
				<div class="editor-toolbar">
					<button class="toolbar-button">
						<strong>B</strong>
					</button>
					<button class="toolbar-button">
						<em>I</em>
					</button>
					<button class="toolbar-button">‚â°</button>
				</div>
				<div class="editor-content">${learner}</div>
			</div>

		
		</div>
	</div>
	<script>
	// H√†m ƒë·ªÉ kh·ªüi t·∫°o c√°c objective-item t·ª´ m·ªôt chu·ªói ƒë∆∞·ª£c ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y
	function initializeObjectivesFromString() {
	    // L·∫•y chu·ªói m·ª•c ti√™u t·ª´ input field ·∫©n
	    const achievementsString = document.getElementById('learnerAchievementsInput').value;
	    
	    if (!achievementsString || achievementsString.trim() === '') {
	        return; // Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω
	    }
	    
	    // X√≥a t·∫•t c·∫£ m·ª•c ti√™u m·∫´u hi·ªán c√≥
	    const container = document.getElementById('objectiveItemsContainer');
	    container.innerHTML = '';
	    
	    // T√°ch chu·ªói th√†nh m·∫£ng c√°c m·ª•c ti√™u d·ª±a tr√™n d·∫•u ph·∫©y
	    const objectives = achievementsString.split(',').map(item => item.trim()).filter(item => item);
	    
	    // T·∫°o m·ªôt objective-item cho m·ªói m·ª•c ti√™u
	    objectives.forEach(objective => {
	        addObjectiveItem(objective);
	    });
	}
	
	// H√†m th√™m m·ªôt objective-item m·ªõi v·ªõi n·ªôi dung c·ª• th·ªÉ
	function addObjectiveItem(text) {
	    const container = document.getElementById('objectiveItemsContainer');
	    
	    // T·∫°o div m·ªõi cho objective-item
	    const newItem = document.createElement('div');
	    newItem.className = 'objective-item';
	    
	    // T·∫°o div cho n·ªôi dung m·ª•c ti√™u
	    const objectiveText = document.createElement('div');
	    objectiveText.className = 'objective-text';
	    objectiveText.textContent = text;
	    
	    // Th√™m event listener cho vi·ªác ch·ªânh s·ª≠a khi click
	    objectiveText.addEventListener('click', function() {
	        // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa text
	        const currentText = this.textContent;
	        
	        // T·∫°o input m·ªõi
	        const objectiveInput = document.createElement('input');
	        objectiveInput.className = 'new-objective-input';
	        objectiveInput.type = 'text';
	        objectiveInput.value = currentText;
	        objectiveInput.style.width = '100%';
	        objectiveInput.style.padding = '5px';
	        objectiveInput.style.border = '1px solid #ccc';
	        objectiveInput.style.borderRadius = '3px';
	        
	        // L·∫•y ph·∫ßn t·ª≠ counter
	        const counter = this.nextElementSibling;
	        
	        // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
	        objectiveInput.addEventListener('keydown', function(e) {
	            if (e.key === 'Enter') {
	                convertEditInputToText(this, counter);
	                updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	            }
	        });
	        
	        objectiveInput.addEventListener('blur', function() {
	            convertEditInputToText(this, counter);
	            updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        });
	        
	        // C·∫≠p nh·∫≠t counter khi g√µ
	        objectiveInput.addEventListener('input', function() {
	            counter.textContent = this.value.length;
	        });
	        
	        // Thay th·∫ø text b·∫±ng input
	        this.parentElement.replaceChild(objectiveInput, this);
	        
	        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
	        objectiveInput.focus();
	        
	        // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
	        objectiveInput.setSelectionRange(currentText.length, currentText.length);
	    });
	    
	    // T·∫°o div cho counter
	    const counter = document.createElement('div');
	    counter.className = 'counter';
	    counter.textContent = text.length;
	    
	    // T·∫°o n√∫t x√≥a
	    const deleteButton = document.createElement('div');
	    deleteButton.className = 'delete-button';
	    deleteButton.textContent = 'üóëÔ∏è';
	    deleteButton.onclick = function() {
	        deleteItem(this);
	        updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n khi x√≥a m·ªôt m·ª•c
	    };
	    
	    // Th√™m c√°c ph·∫ßn t·ª≠ con v√†o item m·ªõi
	    newItem.appendChild(objectiveText);
	    newItem.appendChild(counter);
	    newItem.appendChild(deleteButton);
	    
	    // Th√™m item m·ªõi v√†o container
	    container.appendChild(newItem);
	}
	
	// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t input field ·∫©n khi c√≥ thay ƒë·ªïi
	function updateHiddenField() {
	    const objectiveTexts = Array.from(document.querySelectorAll('.objective-text')).map(item => item.textContent.trim());
	    const hiddenInput = document.getElementById('learnerAchievementsInput');
	    hiddenInput.value = objectiveTexts.join(', ');
	}
	
	// H√†m chuy·ªÉn ƒë·ªïi input th√†nh text
	function convertInputToText(inputElement) {
	    if (inputElement.value.trim() === '') {
	        // N·∫øu input tr·ªëng, x√≥a item
	        inputElement.parentElement.remove();
	        updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        return;
	    }
	    
	    const objectiveText = document.createElement('div');
	    objectiveText.className = 'objective-text';
	    objectiveText.textContent = inputElement.value;
	    
	    // Th√™m event listener cho text m·ªõi
	    objectiveText.addEventListener('click', function() {
	        // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa text
	        const currentText = this.textContent;
	        
	        // T·∫°o input m·ªõi
	        const objectiveInput = document.createElement('input');
	        objectiveInput.className = 'new-objective-input';
	        objectiveInput.type = 'text';
	        objectiveInput.value = currentText;
	        objectiveInput.style.width = '100%';
	        objectiveInput.style.padding = '5px';
	        objectiveInput.style.border = '1px solid #ccc';
	        objectiveInput.style.borderRadius = '3px';
	        
	        // L·∫•y ph·∫ßn t·ª≠ counter
	        const counter = this.nextElementSibling;
	        
	        // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
	        objectiveInput.addEventListener('keydown', function(e) {
	            if (e.key === 'Enter') {
	                convertEditInputToText(this, counter);
	                updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	            }
	        });
	        
	        objectiveInput.addEventListener('blur', function() {
	            convertEditInputToText(this, counter);
	            updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        });
	        
	        // C·∫≠p nh·∫≠t counter khi g√µ
	        objectiveInput.addEventListener('input', function() {
	            counter.textContent = this.value.length;
	        });
	        
	        // Thay th·∫ø text b·∫±ng input
	        this.parentElement.replaceChild(objectiveInput, this);
	        
	        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
	        objectiveInput.focus();
	        
	        // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
	        objectiveInput.setSelectionRange(currentText.length, currentText.length);
	    });
	    
	    // Thay th·∫ø input b·∫±ng text
	    inputElement.parentElement.replaceChild(objectiveText, inputElement);
	}
	
	// H√†m chuy·ªÉn ƒë·ªïi input th√†nh text khi ƒëang ch·ªânh s·ª≠a
	function convertEditInputToText(inputElement, counter) {
	    const objectiveText = document.createElement('div');
	    objectiveText.className = 'objective-text';
	    objectiveText.textContent = inputElement.value;
	    
	    // Th√™m l·∫°i event listener cho text m·ªõi
	    objectiveText.addEventListener('click', function() {
	        // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa text
	        const currentText = this.textContent;
	        
	        // T·∫°o input m·ªõi
	        const objectiveInput = document.createElement('input');
	        objectiveInput.className = 'new-objective-input';
	        objectiveInput.type = 'text';
	        objectiveInput.value = currentText;
	        objectiveInput.style.width = '100%';
	        objectiveInput.style.padding = '5px';
	        objectiveInput.style.border = '1px solid #ccc';
	        objectiveInput.style.borderRadius = '3px';
	        
	        // L·∫•y ph·∫ßn t·ª≠ counter
	        const counter = this.nextElementSibling;
	        
	        // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
	        objectiveInput.addEventListener('keydown', function(e) {
	            if (e.key === 'Enter') {
	                convertEditInputToText(this, counter);
	                updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	            }
	        });
	        
	        objectiveInput.addEventListener('blur', function() {
	            convertEditInputToText(this, counter);
	            updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        });
	        
	        // C·∫≠p nh·∫≠t counter khi g√µ
	        objectiveInput.addEventListener('input', function() {
	            counter.textContent = this.value.length;
	        });
	        
	        // Thay th·∫ø text b·∫±ng input
	        this.parentElement.replaceChild(objectiveInput, this);
	        
	        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
	        objectiveInput.focus();
	        
	        // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
	        objectiveInput.setSelectionRange(currentText.length, currentText.length);
	    });
	    
	    // Thay th·∫ø input b·∫±ng text
	    inputElement.parentElement.replaceChild(objectiveText, inputElement);
	    
	    // C·∫≠p nh·∫≠t counter
	    counter.textContent = objectiveText.textContent.length;
	}
	
	// H√†m x√≥a item
	function deleteItem(button) {
	    button.parentElement.remove();
	    updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n khi x√≥a
	}
	
	// G·ªçi h√†m kh·ªüi t·∫°o khi trang t·∫£i xong
	document.addEventListener('DOMContentLoaded', function() {
	    // Kh·ªüi t·∫°o c√°c objective-item t·ª´ chu·ªói ban ƒë·∫ßu
	    initializeObjectivesFromString();
	    
	    // S·ª≠a ƒë·ªïi s·ª± ki·ªán click c·ªßa n√∫t "Th√™m n·ªôi dung" ƒë·ªÉ c·∫≠p nh·∫≠t input field ·∫©n
	    const addButton = document.getElementById('addButton');
	    const oldClickListeners = addButton.getEventListeners ? addButton.getEventListeners('click') : [];
	    
	    // X√≥a t·∫•t c·∫£ event listener c≈© n·∫øu c√≥
	    if (oldClickListeners && oldClickListeners.length > 0) {
	        oldClickListeners.forEach(listener => {
	            addButton.removeEventListener('click', listener);
	        });
	    } else {
	        // N·∫øu kh√¥ng th·ªÉ l·∫•y event listeners c≈©, ch·ªâ c·∫ßn th√™m m·ªõi
	        // N√∫t v·∫´n s·∫Ω ho·∫°t ƒë·ªông nh∆∞ tr∆∞·ªõc, nh∆∞ng c√≥ th·ªÉ c√≥ duplicate listeners
	    }
	    
	    // Th√™m event listener m·ªõi
	    addButton.addEventListener('click', function() {
	        // T·∫°o div m·ªõi cho objective-item
	        const newItem = document.createElement('div');
	        newItem.className = 'objective-item';
	        
	        // T·∫°o input ƒë·ªÉ nh·∫≠p m·ª•c ti√™u m·ªõi
	        const objectiveInput = document.createElement('input');
	        objectiveInput.className = 'new-objective-input';
	        objectiveInput.type = 'text';
	        objectiveInput.placeholder = 'Nh·∫≠p m·ª•c ti√™u m·ªõi...';
	        objectiveInput.style.width = '100%';
	        objectiveInput.style.padding = '5px';
	        objectiveInput.style.border = '1px solid #ccc';
	        objectiveInput.style.borderRadius = '3px';
	        
	        // Khi ng∆∞·ªùi d√πng nh·∫•n Enter ho·∫∑c r·ªùi kh·ªèi input, chuy·ªÉn input th√†nh text
	        objectiveInput.addEventListener('keydown', function(e) {
	            if (e.key === 'Enter') {
	                convertInputToText(this);
	                updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	            }
	        });
	        
	        objectiveInput.addEventListener('blur', function() {
	            convertInputToText(this);
	            updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        });
	        
	        // T·∫°o div cho counter
	        const counter = document.createElement('div');
	        counter.className = 'counter';
	        counter.textContent = '0';
	        
	        // C·∫≠p nh·∫≠t counter khi g√µ
	        objectiveInput.addEventListener('input', function() {
	            counter.textContent = this.value.length;
	        });
	        
	        // T·∫°o n√∫t x√≥a
	        const deleteButton = document.createElement('div');
	        deleteButton.className = 'delete-button';
	        deleteButton.textContent = 'üóëÔ∏è';
	        deleteButton.onclick = function() {
	            deleteItem(this);
	            updateHiddenField(); // C·∫≠p nh·∫≠t input field ·∫©n
	        };
	        
	        // Th√™m c√°c ph·∫ßn t·ª≠ con v√†o item m·ªõi
	        newItem.appendChild(objectiveInput);
	        newItem.appendChild(counter);
	        newItem.appendChild(deleteButton);
	        
	        // Th√™m item m·ªõi v√†o container
	        const container = document.getElementById('objectiveItemsContainer');
	        container.appendChild(newItem);
	        
	        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
	        objectiveInput.focus();
	    });
	});
	// Th√™m event listener cho t·∫•t c·∫£ c√°c editor-content
    document.querySelectorAll('.editor-content').forEach(contentElement => {
        contentElement.addEventListener('click', function() {
            // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa content
            const currentContent = this.textContent.trim();
            
            // T·∫°o textarea m·ªõi
            const editorTextarea = document.createElement('textarea');
            editorTextarea.className = 'editor-textarea';
            editorTextarea.value = currentContent;
            
            // Thi·∫øt l·∫≠p style cho textarea
            editorTextarea.style.width = '100%';
            editorTextarea.style.minHeight = '100px';
            editorTextarea.style.padding = '15px';
            editorTextarea.style.border = 'none';
            editorTextarea.style.resize = 'vertical';
            editorTextarea.style.fontFamily = 'Arial, sans-serif';
            editorTextarea.style.fontSize = 'inherit';
            editorTextarea.style.color = '#333';
            editorTextarea.style.outline = 'none';
            
            // Khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi textarea ho·∫∑c nh·∫•n Ctrl+Enter, chuy·ªÉn textarea th√†nh text
            editorTextarea.addEventListener('blur', function() {
                convertTextareaToContent(this);
            });
            
            editorTextarea.addEventListener('keydown', function(e) {
                if (e.ctrlKey && e.key === 'Enter') {
                    convertTextareaToContent(this);
                    e.preventDefault();
                }
            });
            
            // Thay th·∫ø content b·∫±ng textarea
            this.parentElement.replaceChild(editorTextarea, this);
            
            // Focus v√†o textarea ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
            editorTextarea.focus();
            
            // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi text
            editorTextarea.setSelectionRange(currentContent.length, currentContent.length);
        });
    });

    // H√†m chuy·ªÉn ƒë·ªïi textarea th√†nh content
    function convertTextareaToContent(textareaElement) {
        const editorContent = document.createElement('div');
        editorContent.className = 'editor-content';
        editorContent.textContent = textareaElement.value || 'Nh·∫≠p n·ªôi dung c·ªßa b·∫°n ·ªü ƒë√¢y...';
        
        // Thi·∫øt l·∫≠p style nh∆∞ ban ƒë·∫ßu
        editorContent.style.padding = '15px';
        editorContent.style.minHeight = '100px';
        editorContent.style.color = textareaElement.value ? '#333' : '#999';
        
        // Th√™m l·∫°i event listener cho content m·ªõi
        editorContent.addEventListener('click', function() {
            const currentContent = this.textContent.trim();
            
            const editorTextarea = document.createElement('textarea');
            editorTextarea.className = 'editor-textarea';
            editorTextarea.value = currentContent;
            
            // Thi·∫øt l·∫≠p style cho textarea
            editorTextarea.style.width = '100%';
            editorTextarea.style.minHeight = '100px';
            editorTextarea.style.padding = '15px';
            editorTextarea.style.border = 'none';
            editorTextarea.style.resize = 'vertical';
            editorTextarea.style.fontFamily = 'Arial, sans-serif';
            editorTextarea.style.fontSize = 'inherit';
            editorTextarea.style.color = '#333';
            editorTextarea.style.outline = 'none';
            
            editorTextarea.addEventListener('blur', function() {
                convertTextareaToContent(this);
            });
            
            editorTextarea.addEventListener('keydown', function(e) {
                if (e.ctrlKey && e.key === 'Enter') {
                    convertTextareaToContent(this);
                    e.preventDefault();
                }
            });
            
            this.parentElement.replaceChild(editorTextarea, this);
            editorTextarea.focus();
            editorTextarea.setSelectionRange(currentContent.length, currentContent.length);
        });
        
        // Thay th·∫ø textarea b·∫±ng content
        textareaElement.parentElement.replaceChild(editorContent, textareaElement);
    }
	</script>
</body>
</html>